import java.lang.Thread;
import java.util.Random; // produce random number for request length
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

// READ: HOW TO RUN CODE
// In command line, compile by
// javac BoundedBuffer.java
// Then run and set n and m by
// java BoundedBuffer 3 6
// where n = 3 and m = 6

// Producer: sleep for random short duration -> produce request ->
// if circular buffer is not full, add -> sleep again

// Consumer (Slave thread): When idle, wait for new request -> consume request, will be busy
// for a duration = request length. Sleep to complete request. Then takes in new request.


class Producer extends Thread{ // extends Threads because there is a sleep method
	private BoundedBuffer bb; // we have access to circular buffer
	Producer(BoundedBuffer bb){ // initialize
		this.bb = bb;
	}
	BoundedBuffer getbb(){
		return bb;
	}

	public void sleep(){ // producer sleeps for 1-m second/s
		Random ran = new Random();
		int sec = ran.nextInt(4); // create random short duration 0-3
		try{
			Thread.sleep(sec*1000); // *1000 because milliseconds*1000 = seconds
			System.out.println("Producer: sleeping for " + sec + " seconds");
		}
		catch(InterruptedException e){
			System.err.println("InterruptedException");
		}
	}

	public void run(){ // this sleeps, produces a Request, and inserts it into queue if there is space in bb
		int rrr = 1; // this is the request ID number
		while(true){ // infinite loop
			Random ran = new Random();
			int len = (ran.nextInt((bb.m)))+1; // produce random number for request length
			Request req = new Request(rrr, len); // create a new request
			DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
			Date date = new Date();
			System.out.println("Producer: produced request ID " + rrr + " at time " + dateFormat.format(date));
			rrr++;
			bb.add(req); // add the request to bb (boundedbuffer, which is also circular buffer)
			sleep();
		}
	}
}

class Consumer extends Thread{ // implements Runnable because consumers should be different from producer
	private int num; // ID of consumer
	private BoundedBuffer bb; // we have access to circular buffer
	Consumer(int num, BoundedBuffer bb){ // initialize
		this.num = num;
		this.bb = bb;
	}
	int getnum(){
		return num;
	}
	BoundedBuffer getbb(){
		return bb;
	}

	public void sleep(int num, int slp){ // sleep means to complete the request
		try{
			System.out.println("Consumer " + num + ": sleeping for " + slp + " seconds");
			Thread.sleep(slp*1000);
		}
		catch(InterruptedException e){
			System.err.println("InterruptedException");
		}
	}
	public void run(){
		while(true){
			Request req = bb.remove(); // take out a request from the circular buffer
			DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss"); // create date to print out
			Date date1 = new Date();
			System.out.println("Consumer " + num + ": assigned request ID " + req.getid() +", processing request for the next " + req.getlength() + " seconds, current time is " + dateFormat.format(date1));
			sleep(num, req.getlength()); // get length of request
			Date date2 = new Date();
			System.out.print("Consumer " + num + ": completed request ID " + req.getid());
			System.out.println(" at time " + dateFormat.format(date2));
		}
	}
}

class Request{
	private int id; // ID of request
	private int length; // request length between 1 and M seconds

	Request(int id, int length){ // initialize them
		this.id = id;
		this.length = length;
	}
	int getid(){
		return id;
	}
	int getlength(){
		return length;
	}
}

public class BoundedBuffer{
	public static int n; // In the command line, when running "java BoundedBuffer 3 4"
	public static int m; // n will be 3 and m will be 4.
	
	private Request[] r; // an array of Requests
	private int top; // this is the index of last request added
	private int bottom; // this is the index of first thing added, when remove, we remove from bottom
	BoundedBuffer(Request[] r, int top, int bottom){ // initialize these
		this.r = r;
		this.top = top;
		this.bottom = bottom;
	}
	int getTop(){
		return top;
	}
	int getBottom(){
		return bottom;
	}

	public synchronized void add(Request req){ // put item on queue
		while(bottom == (top+1)%n){ // while bb (circular buffer) is full, wait
				try{
					wait();
				}
				catch(InterruptedException e){
					System.err.println("ErrorWaiting");
				}
			}
			r[top] = req; // we add it into array
		// r[(top+1)%n] = req;
		top = (top+1)%n; // we increment the top
		notify(); // notify so that others can do work
	}

	public synchronized Request remove(){
		while(top == bottom){ // while bb is empty, wait
			try{
				wait();
			}
			catch(InterruptedException e){
				System.err.println("ErrorWaiting");
			}
		}
		Request req = r[bottom]; // get the bottom request
		r[bottom] = null; // we took it, so empty it
		bottom = (bottom+1)%n; // increment bottom
		notify(); // notify so that others can now do work
		return req; // return it
	}

	public static void main(String[] args){
		if (args.length > 0) { // this, from the oracle java tutorial, reads in parameter from command line
			try {
				n = Integer.parseInt(args[0]); // this is size of circular buffer and number of consumers
				m = Integer.parseInt(args[1]); // this is request length
			}
			catch (NumberFormatException e) {
				System.err.println("Argument" + args[0] + " must be an integer.");
				System.exit(1);
			}
		}

		BoundedBuffer bb = new BoundedBuffer(new Request[n], 0, 0); // create circular buffer
		Producer pro = new Producer(bb); // creates producer
		for(int i = 1; i <= n; i++){
			Consumer con = new Consumer(i, bb); // creates N consumers
			con.start(); // runs consumers
			System.out.println("Consumer " + i + " is created."); 
		}
		pro.run(); // runs producer
	}

}
